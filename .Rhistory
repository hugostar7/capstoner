)
# No error when x and label are supplied, n_max missing
expect_no_error(
p +
geom_timeline_label(my_data,
ggplot2::aes(x = DATE, y = COUNTRY, label = LOCATION_NAME,
orderBy = Mag), inherit.aes = FALSE)
)
})
p +
geom_timeline_label(my_data,
ggplot2::aes(y = COUNTRY, label = LOCATION_NAME, orderBy = Mag),
n_max = 5, inherit.aes = FALSE)
p +
geom_timeline_label(my_data,
ggplot2::aes(x = DATE, y = COUNTRY, orderBy = Mag),
n_max = 5, inherit.aes = FALSE)
p +
geom_timeline_label(my_data,
ggplot2::aes(x = DATE, label = LOCATION_NAME),
inherit.aes = FALSE)
p +
geom_timeline_label(my_data,
ggplot2::aes(x = DATE, y = COUNTRY, label = LOCATION_NAME,
orderBy = Mag), n_max = 5, inherit.aes = FALSE)
p +
geom_timeline_label(my_data,
ggplot2::aes(x = DATE, label = LOCATION_NAME,
orderBy = Mag), n_max = 5, inherit.aes = FALSE)
test_that("annotation geom requires x and label", {
# Data
my_data = data.frame(
Mag = 3, Deaths = 0,
DATE = as.Date(paste(2001:2005, 1:5, 11:15, sep = "-")),
LONGITUDE = 21:25,
LATITUDE = 31:35,
COUNTRY = c("AAAA", "BBBB", "CCCC", "DDDD", "EEEE"),
LOCATION_NAME = c("Aaaa", "Bbbb", "Cccc", "Dddd", "Eeee"),
check.names = FALSE
)
# Create a plot
p <-
ggplot2::ggplot(my_data,
ggplot2::aes(x = DATE, y = COUNTRY, size = Mag, colour = Deaths)) +
ggplot2::geom_point()
# Error when x missing
expect_error(
p +
geom_timeline_label(my_data,
ggplot2::aes(y = COUNTRY, label = LOCATION_NAME, orderBy = Mag),
n_max = 5, inherit.aes = FALSE)
)
# Error when label missing
expect_error(
p +
geom_timeline_label(my_data,
ggplot2::aes(x = DATE, y = COUNTRY, orderBy = Mag),
n_max = 5, inherit.aes = FALSE)
)
# No error when x and label are supplied, nothing else added
expect_no_error(
p +
geom_timeline_label(my_data,
ggplot2::aes(x = DATE, label = LOCATION_NAME),
inherit.aes = FALSE)
)
# No error when x and label are supplied
expect_no_error(
p +
geom_timeline_label(my_data,
ggplot2::aes(x = DATE, y = COUNTRY, label = LOCATION_NAME,
orderBy = Mag), n_max = 5, inherit.aes = FALSE)
)
# No error when x and label are supplied, y missing
expect_no_error(
p +
geom_timeline_label(my_data,
ggplot2::aes(x = DATE, label = LOCATION_NAME,
orderBy = Mag), n_max = 5, inherit.aes = FALSE)
)
# No error when x and label are supplied, orderBy missing
expect_no_error(
p +
geom_timeline_label(my_data,
ggplot2::aes(x = DATE, y = COUNTRY, label = LOCATION_NAME),
n_max = 5, inherit.aes = FALSE)
)
# No error when x and label are supplied, n_max missing
expect_no_error(
p +
geom_timeline_label(my_data,
ggplot2::aes(x = DATE, y = COUNTRY, label = LOCATION_NAME,
orderBy = Mag), inherit.aes = FALSE)
)
})
test_that("annotation geom requires x and label", {
# Data
my_data = data.frame(
Mag = 3, Deaths = 0,
DATE = as.Date(paste(2001:2005, 1:5, 11:15, sep = "-")),
LONGITUDE = 21:25,
LATITUDE = 31:35,
COUNTRY = c("AAAA", "BBBB", "CCCC", "DDDD", "EEEE"),
LOCATION_NAME = c("Aaaa", "Bbbb", "Cccc", "Dddd", "Eeee"),
check.names = FALSE
)
# Create a plot
p <-
ggplot2::ggplot(my_data,
ggplot2::aes(x = DATE, y = COUNTRY, size = Mag, colour = Deaths)) +
ggplot2::geom_point()
# Error when x missing
#expect_error(
#p +
#geom_timeline_label(my_data,
#ggplot2::aes(y = COUNTRY, label = LOCATION_NAME, orderBy = Mag),
#n_max = 5, inherit.aes = FALSE)
#)
# Error when label missing
#expect_error(
#p +
#geom_timeline_label(my_data,
#ggplot2::aes(x = DATE, y = COUNTRY, orderBy = Mag),
#n_max = 5, inherit.aes = FALSE)
#)
# No error when x and label are supplied, nothing else added
expect_no_error(
p +
geom_timeline_label(my_data,
ggplot2::aes(x = DATE, label = LOCATION_NAME),
inherit.aes = FALSE)
)
# No error when x and label are supplied
expect_no_error(
p +
geom_timeline_label(my_data,
ggplot2::aes(x = DATE, y = COUNTRY, label = LOCATION_NAME,
orderBy = Mag), n_max = 5, inherit.aes = FALSE)
)
# No error when x and label are supplied, y missing
expect_no_error(
p +
geom_timeline_label(my_data,
ggplot2::aes(x = DATE, label = LOCATION_NAME,
orderBy = Mag), n_max = 5, inherit.aes = FALSE)
)
# No error when x and label are supplied, orderBy missing
expect_no_error(
p +
geom_timeline_label(my_data,
ggplot2::aes(x = DATE, y = COUNTRY, label = LOCATION_NAME),
n_max = 5, inherit.aes = FALSE)
)
# No error when x and label are supplied, n_max missing
expect_no_error(
p +
geom_timeline_label(my_data,
ggplot2::aes(x = DATE, y = COUNTRY, label = LOCATION_NAME,
orderBy = Mag), inherit.aes = FALSE)
)
})
test_that("annotation stat requires x and label", {
# Data
my_data = data.frame(
Mag = 3, Deaths = 0,
DATE = as.Date(paste(2001:2005, 1:5, 11:15, sep = "-")),
LONGITUDE = 21:25,
LATITUDE = 31:35,
COUNTRY = c("AAAA", "BBBB", "CCCC", "DDDD", "EEEE"),
LOCATION_NAME = c("Aaaa", "Bbbb", "Cccc", "Dddd", "Eeee"),
check.names = FALSE
)
# Create a plot
p <-
ggplot2::ggplot(my_data,
ggplot2::aes(x = DATE, y = COUNTRY, size = Mag, colour = Deaths)) +
ggplot2::geom_point()
# Error when x missing
#expect_error(
#p +
#stat_timeline_label(my_data,
#ggplot2::aes(y = COUNTRY, label = LOCATION_NAME, orderBy = Mag),
#n_max = 5, inherit.aes = FALSE)
#)
# Error when label missing
#expect_error(
#p +
#stat_timeline_label(my_data,
#ggplot2::aes(x = DATE, y = COUNTRY, orderBy = Mag),
#n_max = 5, inherit.aes = FALSE)
#)
# No error when x and label are supplied, nothing else added
expect_no_error(
p +
stat_timeline_label(my_data,
ggplot2::aes(x = DATE, label = LOCATION_NAME),
inherit.aes = FALSE)
)
# No error when x and label are supplied
expect_no_error(
p +
stat_timeline_label(my_data,
ggplot2::aes(x = DATE, y = COUNTRY, label = LOCATION_NAME,
orderBy = Mag), n_max = 5, inherit.aes = FALSE)
)
# No error when x and label are supplied, y missing
expect_no_error(
p +
stat_timeline_label(my_data,
ggplot2::aes(x = DATE, label = LOCATION_NAME,
orderBy = Mag), n_max = 5, inherit.aes = FALSE)
)
# No error when x and label are supplied, orderBy missing
expect_no_error(
p +
stat_timeline_label(my_data,
ggplot2::aes(x = DATE, y = COUNTRY, label = LOCATION_NAME),
n_max = 5, inherit.aes = FALSE)
)
# No error when x and label are supplied, n_max missing
expect_no_error(
p +
stat_timeline_label(my_data,
ggplot2::aes(x = DATE, y = COUNTRY, label = LOCATION_NAME,
orderBy = Mag), inherit.aes = FALSE)
)
})
p +
stat_timeline_label(my_data,
ggplot2::aes(x = DATE, y = COUNTRY, label = LOCATION_NAME),
n_max = 5, inherit.aes = FALSE)
p +
stat_timeline_label(my_data,
ggplot2::aes(x = DATE, y = COUNTRY, label = LOCATION_NAME),
n_max = 5)
p
p +
stat_timeline_label(my_data,
ggplot2::aes(x = DATE, y = COUNTRY, label = LOCATION_NAME),
n_max = 5, inherit.aes = TRUE)
p +
stat_timeline_label(my_data,
aes(x = DATE, y = COUNTRY, label = LOCATION_NAME),
n_max = 5, inherit.aes = TRUE)
# Create a plot
ggplot2::ggplot(my_data,
ggplot2::aes(x = DATE, y = COUNTRY, size = Mag, colour = Deaths,
label = LOCATION_NAME)) +
ggplot2::geom_point() + stat_timeline_label()
ggplot2::ggplot(my_data,
ggplot2::aes(x = DATE, y = COUNTRY, size = Mag, colour = Deaths,
label = LOCATION_NAME)) +
ggplot2::geom_point() +
stat_timeline_label(
ggplot2::aes(x = DATE, label = LOCATION_NAME)
)
ggplot2::ggplot(my_data,
ggplot2::aes(x = DATE, y = COUNTRY, size = Mag, colour = Deaths)) +
ggplot2::geom_point() +
stat_timeline_label(
ggplot2::aes(x = DATE, label = LOCATION_NAME)
)
ggplot2::ggplot(my_data,
ggplot2::aes(x = DATE, y = COUNTRY, size = Mag, colour = Deaths)) +
ggplot2::geom_point() +
stat_timeline_label(
ggplot2::aes(x = DATE, label = LOCATION_NAME), inherit.aes = FALSE
)
p <- ggplot2::ggplot(my_data,
ggplot2::aes(x = DATE, y = COUNTRY, size = Mag, colour = Deaths)) +
ggplot2::geom_point()
p
p + stat_timeline_label(
ggplot2::aes(x = DATE, label = LOCATION_NAME), inherit.aes = FALSE)
p +
stat_timeline_label(
ggplot2::aes(x = DATE, label = LOCATION_NAME), inherit.aes = FALSE)
expect_no_error(
p +
stat_timeline_label(
ggplot2::aes(x = DATE, label = LOCATION_NAME), inherit.aes = FALSE)
)
expect_no_error(
p +
stat_timeline_label(
ggplot2::aes(x = DATE, label = LOCATION_NAME), inherit.aes = FALSE)
)
devtools::load_all(".")
dat = data.frame(
DATE = as.Date(c("2010-10-23", "2010-12-24", "2010-5-13",
"2010-5-27","2010-01-13","2010-7-18",
"2010-03-16","2010-01-13","2010-7-18",
"2010-03-16","2010-10-23", "2010-12-24")),
AGE = c(1,2,2,1,3,3,2,3,1,4,4,3),
height = c(1,2,3,1,3,3,4,3,4,5,7,5),
weight = c(2,1,3,2,2,3,4,2,3,6,6,5)
)
p <- ggplot2::ggplot(
dat, ggplot2::aes(x = DATE, y = AGE, colour = height,
size = weight)
) + ggplot2::geom_point()
p + stat_timeline_label(ggplot2::aes(x = DATE, label = DATE))
dat = data.frame(
DATE = as.Date(c("2010-10-23", "2010-12-24", "2010-5-13",
"2010-5-27","2010-01-13","2010-7-18",
"2010-03-16","2010-01-13","2010-7-18",
"2010-03-16","2010-10-23", "2010-12-24")),
AGE = c(1,2,2,1,3,3,2,3,1,4,4,3),
height = c(1,2,3,1,3,3,4,3,4,5,7,5),
weight = c(2,1,3,2,2,3,4,2,3,6,6,5)
)
p <- ggplot2::ggplot(
dat, ggplot2::aes(x = DATE, y = AGE, colour = height,
size = weight)
) + ggplot2::geom_point()
p + stat_timeline_label(ggplot2::aes(x = DATE, y = AGE, label = DATE))
devtools::load_all(".")
usethis::use_data_raw("babygrowth")
## code to prepare `babygrowth` dataset goes here
babygrowth <- data.frame(
DATE = as.Date(c("2010-10-23", "2010-12-24", "2010-5-13",
"2010-5-27","2010-01-13","2010-7-18",
"2010-03-16","2010-01-13","2010-7-18",
"2010-03-16","2010-10-23", "2010-12-24")),
AGE = c(1,2,2,1,3,3,2,3,1,4,4,3),
height = c(1,2,3,1,3,3,4,3,4,5,7,5),
weight = c(2,1,3,2,2,3,4,2,3,6,6,5)
)
usethis::use_data(babygrowth, overwrite = TRUE)
usethis::use_r("babygrowth")
usethis::use_test("babygrowth")
usethis::use_data_raw("my_EQ_clean")
## code to prepare `my_EQ_clean` dataset goes here
my_EQ_clean = data.frame(
Mag = 3, Deaths = 0,
DATE = as.Date(paste(2001:2005, 1:5, 11:15, sep = "-")),
LONGITUDE = 21:25,
LATITUDE = 31:35,
COUNTRY = c("AAAA", "BBBB", "CCCC", "DDDD", "EEEE"),
LOCATION_NAME = c("Aaaa", "Bbbb", "Cccc", "Dddd", "Eeee"),
check.names = FALSE
)
usethis::use_data(my_EQ_clean, overwrite = TRUE)
usethis::use_r("my_EQ_clean")
usethis::use_test("my_EQ_clean")
usethis::use_data_raw("my_EQ")
my_EQ <- data.frame(
Year = 2001:2005, Mo = 1:5, Dy = 11:15,
Longitude = 21:25, Latitude = 31:35,
`Location Name` = paste(
c("AAAA", "BBBB", "CCCC", "DDDD", "EEEE"),
c("AAAA", "BBBB", "CCCC", "DDDD", "EEEE"), sep = ":"),
Mag = 3, Deaths = 0,
check.names = FALSE
)
## code to prepare `my_EQ` dataset goes here
my_EQ <- data.frame(
Year = 2001:2005, Mo = 1:5, Dy = 11:15,
Longitude = 21:25, Latitude = 31:35,
`Location Name` = paste(
c("AAAA", "BBBB", "CCCC", "DDDD", "EEEE"),
c("AAAA", "BBBB", "CCCC", "DDDD", "EEEE"), sep = ":"),
Mag = 3, Deaths = 0,
check.names = FALSE
)
usethis::use_data(my_EQ, overwrite = TRUE)
usethis::use_r("my_EQ")
# Clean earthquakes data
eq_clean_data(earthquakes)
# Clean my df
df = data.frame(
Year = 2001:2005, Mo = 1:5, Dy = 11:15,
Longitude = 21:25, Latitude = 31:35
)
eq_clean_data(df)
# Clean earthquakes data frame
eq_location_clean(earthquakes)
# Clean earthquakes data and filter data for specific countries
eq_location_clean(earthquakes, countries = "ALASKA")
eq_location_clean(earthquakes, countries = c("PERU", "FRANCE", "ITALY"))
# Clean earthquakes data and filter data for a minimum or maximum year
eq_location_clean(earthquakes, year_min = 1970)
eq_location_clean(earthquakes, year_max = 1975)
eq_location_clean(earthquakes, year_min = 1970, year_max = 2000)
# Clean earthquakes data and filter data for specific countries
# and years range
eq_location_clean(earthquakes, 1970, 2000, c("PERU", "FRANCE", "ITALY"))
devtools::load_all(".")
warnings()
earthquakes
head(earthquakes, 10)[ , 33:39]
#' @examples
library(ggplot2)
# Example 1
lcd = eq_location_clean(earthquakes, countries = "ALASKA")
ggplot2::ggplot(lcd, ggplot2::aes(x = DATE)) +
geom_timeline()
# Example 2
lcd = eq_location_clean(earthquakes, 2000, 2020, c("CHINA","TURKEY"))
ggplot2::ggplot(
lcd,
ggplot2::aes(x = DATE, y = COUNTRY, colour = Deaths, size = Mag)) +
geom_timeline()
# Example 3
df = data.frame(
DATE = c(1,2,3,1,2),
COUNTRY = c("C","A","C","B","B")
)
ggplot2::ggplot(df, ggplot2::aes(x = DATE, y = COUNTRY)) +
geom_timeline(xMin = 2,xMax = 5)
# Example 4
data = my_EQ_clean
ggplot2::ggplot(data, ggplot2::aes(x = DATE, y = 1, colour = height,
size = weight)) +
geom_timeline(alpha = .5)
babygrowth
# Example 4
data = babygrowth
ggplot2::ggplot(data, ggplot2::aes(x = DATE, y = 1, colour = height,
size = weight)) +
geom_timeline(alpha = .5)
# Example 4
data = babygrowth
ggplot2::ggplot(data, ggplot2::aes(x = DATE, y = AGE, colour = height,
size = weight)) +
geom_timeline()
# Example 4
data = babygrowth
ggplot2::ggplot(data, ggplot2::aes(x = DATE, y = 1, colour = height,
size = weight)) +
geom_timeline(alpha = .5)
# Example 4
data = babygrowth
ggplot2::ggplot(data, ggplot2::aes(x = DATE, y = AGE, colour = height,
size = weight)) +
geom_timeline()
# Example 6
data = my_EQ_clean
ggplot2::ggplot(data, ggplot2::aes(x = DATE, y = COUNTRY, colour = Deaths,
size = Mag)) +
geom_timeline()
# Example
data = my_EQ_clean
ggplot2::ggplot(data, ggplot2::aes(x = DATE, colour = Deaths, size = Mag)) +
geom_timeline()
devtools::load_all(".")
warnings()
q()
devtools::load_all(".")
warnings()
devtools::load_all(".")
warnings()
# Clean earthquakes data
eq_clean_data(earthquakes)
# Clean my df
df = data.frame(
Year = 2001:2005, Mo = 1:5, Dy = 11:15,
Longitude = 21:25, Latitude = 31:35
)
eq_clean_data(df)
# Clean earthquakes data frame
eq_location_clean(earthquakes)
# Clean earthquakes data and filter data for specific countries
eq_location_clean(earthquakes, countries = "ALASKA")
eq_location_clean(earthquakes, countries = c("PERU", "FRANCE", "ITALY"))
# Clean earthquakes data and filter data for a minimum or maximum year
eq_location_clean(earthquakes, year_min = 1970)
eq_location_clean(earthquakes, year_max = 1975)
eq_location_clean(earthquakes, year_min = 1970, year_max = 2000)
# Clean earthquakes data and filter data for specific countries
# and years range
eq_location_clean(earthquakes, 1970, 2000, c("PERU", "FRANCE", "ITALY"))
# Clean earthquakes data
eq_clean_data(earthquakes)
# Clean my df
df = data.frame(
Year = 2001:2005, Mo = 1:5, Dy = 11:15,
Longitude = 21:25, Latitude = 31:35
)
eq_clean_data(df)
# Clean earthquakes data frame
eq_location_clean(earthquakes)
# Clean earthquakes data and filter data for specific countries
eq_location_clean(earthquakes, countries = "ALASKA")
eq_location_clean(earthquakes, countries = c("PERU", "FRANCE", "ITALY"))
# Clean earthquakes data and filter data for a minimum or maximum year
eq_location_clean(earthquakes, year_min = 1970)
eq_location_clean(earthquakes, year_max = 1975)
eq_location_clean(earthquakes, year_min = 1970, year_max = 2000)
# Clean earthquakes data and filter data for specific countries
# and years range
eq_location_clean(earthquakes, 1970, 2000, c("PERU", "FRANCE", "ITALY"))
devtools::load_all(".")
?eq_location_clean
?my_EQ_clean
lcd = eq_location_clean(earthquakes, countries = "ALASKA")
ggplot2::ggplot(lcd, ggplot2::aes(x = DATE)) +
stat_timeline()
lcd = eq_location_clean(earthquakes, countries = "ALASKA")
ggplot2::ggplot(lcd, ggplot2::aes(x = DATE)) +
stat_timeline()
lcd = eq_location_clean(earthquakes, countries = "ALASKA")
ggplot2::ggplot(lcd, ggplot2::aes(x = DATE)) +
stat_timeline()
# Example 2
lcd = eq_location_clean(earthquakes, 2000, 2020, c("CHINA","TURKEY"))
ggplot2::ggplot(
lcd,
ggplot2::aes(x = DATE, y = COUNTRY, colour = Deaths, size = Mag)) +
stat_timeline()
devtools::load_all(".")
q()
